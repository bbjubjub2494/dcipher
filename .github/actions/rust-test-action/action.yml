name: 'Rust Test Action'
description: 'Runs format check, clippy, and tests for a Rust crate'
inputs:
  working-directory:
    required: true
    description: 'Directory containing the Rust crate'
  target-folder:
    required: false
    default: './target'
    description: 'Target folder used for building'
  additional-flags:
    required: false
    default: ''
    description: 'Additional flags for cargo commands'

runs:
  using: "composite"
  steps:
    # Pull cargo nextest binaries
    - uses: taiki-e/install-action@v2
      with:
        tool: nextest,cargo-hack

    - name: Cache Cargo registry ðŸ”§
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache Cargo index ðŸ”§
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache Cargo build ðŸ”§
      uses: actions/cache@v3
      with:
        path: ${{ inputs.target-folder }}
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |

    - name: Check formatting
      working-directory: ${{ inputs.working-directory }}
      run: cargo fmt --check ${{ inputs.additional-flags }}
      shell: bash

    - name: Check clippy
      working-directory: ${{ inputs.working-directory }}
      run: cargo clippy --all-features --all-targets --target-dir ${{ inputs.target-folder }} -- -Dwarnings ${{ inputs.additional-flags }}
      shell: bash

    - name: Check clippy (each features)
      working-directory: ${{ inputs.working-directory }}
      run: cargo hack clippy --each-feature --all-targets --target-dir ${{ inputs.target-folder }} -- -Dwarnings ${{ inputs.additional-flags }}
      shell: bash

    - name: Run all tests
      working-directory: ${{ inputs.working-directory }}
      run: cargo nextest run --target-dir ${{ inputs.target-folder }} --no-tests warn
      shell: bash
